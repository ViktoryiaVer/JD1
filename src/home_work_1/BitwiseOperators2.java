package home_work_1;

public class BitwiseOperators2 {
    public static void main(String[] args) {

        //Используется побитовый оператор AND
        int c = -42 & -15; // -42 = 11010110; -15 = 11110001; c = 11010000;
        System.out.println("-42 & -15 = " + c);

        //Используется побитовый оператор OR
        int d = -42 | -15; // -42 = 11010110; -15 = 11110001; d = 11110111;
        System.out.println("-42 | -15 = " + d); // Результат выводится в консоль

        // Используется побитовый оператор XOR
        int e = -42 ^ -15; // -42 = 11010110; -15 = 11110001; e = 00100111;
        System.out.println("-42 ^ -15 = " +  e);

        //Используется побитовый унарный оператор NOT
        int f = ~-42; // -42 = 11010110; f = 00101001;
        System.out.println("~-42 = " + f);
        int g = ~-15; // -15 = 11110001; g = 00001110;
        System.out.println("~-15 = " + g);

        // Используется сдвиг вправо
        int h = -42 >> -15; // -42 = 11010110; -15 = 11110001; h = 11111111111111111111111111111111;
        System.out.println("-42 >> -15 = " +h);

        // Используется сдвиг вправо с заполнением нулями
        int j = -42 >>> 2; // -42 = 11010110; j = 00111111111111111111111111110101;
        System.out.println("-42 >>> 2 = " + j);
        int k = -15 >>> 2; // -15 = 11110001; k = 00111111111111111111111111111100;
        System.out.println("-15 >>> 2 = " + k);

        // Используется сдвиг влево
        int l = -42 << 2; // -42 = 11010110; l = 01011000;
        System.out.println("-42 << 2 = " +l);
        int m = -15 << 2; // -15 = 11110001; m = 11000100;
        System.out.println("-15 << 2 = " + m);

    }
}
